# Generated by Django 5.2.3 on 2025-08-09 01:03

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('microdistrict', models.CharField(blank=True, max_length=255, null=True, verbose_name='Microdistrict')),
                ('complex_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Complex Name')),
                ('street', models.CharField(blank=True, max_length=255, null=True, verbose_name='Street')),
                ('building_no', models.CharField(blank=True, max_length=50, null=True, verbose_name='Building Number')),
                ('latitude', models.DecimalField(blank=True, decimal_places=8, max_digits=10, null=True, verbose_name='Latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=8, max_digits=11, null=True, verbose_name='Longitude')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'db_table': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='Agency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Agency Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Agency',
                'verbose_name_plural': 'Agencies',
                'db_table': 'agencies',
            },
        ),
        migrations.CreateModel(
            name='BuildingType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Код')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'Тип дома',
                'verbose_name_plural': 'Типы домов',
                'db_table': 'building_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Landmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Code')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Landmark',
                'verbose_name_plural': 'Landmarks',
                'db_table': 'landmarks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Microdistrict',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Код')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'Микрорайон',
                'verbose_name_plural': 'Микрорайоны',
                'db_table': 'microdistricts',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RepairType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='Код')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
            ],
            options={
                'verbose_name': 'Тип ремонта',
                'verbose_name_plural': 'Типы ремонта',
                'db_table': 'repair_types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Tariff Name')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Price')),
                ('duration_days', models.IntegerField(verbose_name='Duration (days)')),
                ('features', models.TextField(verbose_name='Features')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Tariff',
                'verbose_name_plural': 'Tariffs',
                'db_table': 'tariffs',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Phone Number')),
                ('additional_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Additional Phone')),
                ('whatsapp_phone', models.CharField(blank=True, max_length=17, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')], verbose_name='WhatsApp Phone')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('is_first_login', models.BooleanField(default=True, verbose_name='Is First Login')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('agency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='main.agency', verbose_name='Agency')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rooms_count', models.SmallIntegerField(verbose_name='Number of Rooms')),
                ('price', models.BigIntegerField(verbose_name='Price')),
                ('year_built', models.IntegerField(blank=True, null=True, verbose_name='Year Built')),
                ('is_new_building', models.BooleanField(default=False, verbose_name='Is New Building')),
                ('floor', models.SmallIntegerField(blank=True, null=True, verbose_name='Floor')),
                ('total_floors', models.SmallIntegerField(blank=True, null=True, verbose_name='Total Floors')),
                ('area', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Area (sq.m)')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('krisha_link', models.URLField(blank=True, null=True, verbose_name='Krisha.kz Link')),
                ('commission_type', models.CharField(choices=[('seller', 'Я беру с продавца, вы берете с покупателя'), ('split', 'Я беру с продавца и (ввод числа) тенге с покупателя. Остальное ваше'), ('buyer', 'Я беру с продавца, вы - с покупателя и я дополнительно доплачиваю вам (ввод числа) тенге')], max_length=20, verbose_name='Commission Type')),
                ('commission_percentage', models.IntegerField(blank=True, null=True, verbose_name='Commission Percentage')),
                ('commission_amount', models.IntegerField(blank=True, null=True, verbose_name='Commission Amount')),
                ('commission_bonus', models.IntegerField(blank=True, null=True, verbose_name='Commission Bonus')),
                ('is_archived', models.BooleanField(default=False, verbose_name='Is Archived')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='main.address', verbose_name='Address')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('building_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='main.buildingtype', verbose_name='Building Type')),
                ('landmarks', models.ManyToManyField(blank=True, related_name='announcements', to='main.landmark', verbose_name='Landmarks')),
                ('repair_status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='main.repairtype', verbose_name='Repair Status')),
            ],
            options={
                'verbose_name': 'Announcement',
                'verbose_name_plural': 'Announcements',
                'db_table': 'announcements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Collection Name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Collection',
                'verbose_name_plural': 'Collections',
                'db_table': 'collections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PageView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=500, verbose_name='Page Path')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('duration_seconds', models.IntegerField(default=0, verbose_name='Duration (seconds)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_views', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Page View',
                'verbose_name_plural': 'Page Views',
                'db_table': 'page_views',
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255, verbose_name='File Name')),
                ('file_path', models.CharField(max_length=500, verbose_name='File Path')),
                ('file_size', models.BigIntegerField(verbose_name='File Size')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME Type')),
                ('original_name', models.CharField(max_length=255, verbose_name='Original Name')),
                ('is_main', models.BooleanField(default=False, verbose_name='Is Main Photo')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('thumbnail_path', models.CharField(blank=True, max_length=500, null=True, verbose_name='Thumbnail Path')),
                ('thumbnail_size', models.BigIntegerField(blank=True, null=True, verbose_name='Thumbnail Size')),
                ('announcement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to='main.announcement', verbose_name='Announcement')),
            ],
            options={
                'verbose_name': 'Photo',
                'verbose_name_plural': 'Photos',
                'db_table': 'photos',
            },
        ),
        migrations.CreateModel(
            name='ResidentialComplex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название ЖК')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активен')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('microdistrict', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complexes', to='main.microdistrict', verbose_name='Микрорайон')),
            ],
            options={
                'verbose_name': 'Жилой комплекс',
                'verbose_name_plural': 'Жилые комплексы',
                'db_table': 'residential_complexes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateTimeField(verbose_name='Start Date')),
                ('end_date', models.DateTimeField(verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('tariff', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='main.tariff', verbose_name='Tariff')),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='UserPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255, verbose_name='File Name')),
                ('file_path', models.CharField(max_length=500, verbose_name='File Path')),
                ('file_size', models.BigIntegerField(verbose_name='File Size')),
                ('mime_type', models.CharField(max_length=100, verbose_name='MIME Type')),
                ('original_name', models.CharField(max_length=255, verbose_name='Original Name')),
                ('is_main', models.BooleanField(default=False, verbose_name='Is Main Photo')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, verbose_name='Uploaded At')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='photos', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Photo',
                'verbose_name_plural': 'User Photos',
                'db_table': 'user_photos',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=40, verbose_name='Session Key')),
                ('login_time', models.DateTimeField(verbose_name='Login Time')),
                ('logout_time', models.DateTimeField(blank=True, null=True, verbose_name='Logout Time')),
                ('duration', models.DurationField(blank=True, null=True, verbose_name='Duration')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Session',
                'verbose_name_plural': 'User Sessions',
                'db_table': 'user_sessions',
            },
        ),
        migrations.CreateModel(
            name='CollectionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True, verbose_name='Added At')),
                ('announcement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_items', to='main.announcement', verbose_name='Announcement')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.collection', verbose_name='Collection')),
            ],
            options={
                'verbose_name': 'Collection Item',
                'verbose_name_plural': 'Collection Items',
                'db_table': 'collection_items',
                'unique_together': {('collection', 'announcement')},
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('login', 'Вход в систему'), ('logout', 'Выход из системы'), ('view_page', 'Просмотр страницы'), ('create_announcement', 'Создание объявления'), ('edit_announcement', 'Редактирование объявления'), ('delete_announcement', 'Удаление объявления'), ('archive_announcement', 'Архивирование объявления'), ('unarchive_announcement', 'Восстановление объявления'), ('auto_archive_announcement', 'Автоматическое архивирование объявления'), ('view_announcement', 'Просмотр объявления'), ('search_announcements', 'Поиск объявлений'), ('filter_announcements', 'Фильтрация объявлений'), ('create_collection', 'Создание коллекции'), ('edit_collection', 'Редактирование коллекции'), ('delete_collection', 'Удаление коллекции'), ('add_to_collection', 'Добавление в коллекцию'), ('remove_from_collection', 'Удаление из коллекции'), ('view_collection', 'Просмотр коллекции'), ('upload_photo', 'Загрузка фото'), ('delete_photo', 'Удаление фото'), ('set_main_photo', 'Установка главного фото'), ('upload_user_photo', 'Загрузка фото профиля'), ('update_profile', 'Обновление профиля'), ('view_profile', 'Просмотр профиля'), ('change_password', 'Изменение пароля'), ('export_data', 'Экспорт данных'), ('api_call', 'API запрос'), ('error', 'Ошибка')], max_length=50, verbose_name='Тип действия')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('metadata', models.JSONField(blank=True, null=True, verbose_name='Метаданные')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP адрес')),
                ('user_agent', models.TextField(blank=True, null=True, verbose_name='User Agent')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Время')),
                ('session_key', models.CharField(blank=True, max_length=40, null=True, verbose_name='Ключ сессии')),
                ('page_url', models.URLField(blank=True, null=True, verbose_name='URL страницы')),
                ('referrer', models.URLField(blank=True, null=True, verbose_name='Referrer')),
                ('is_successful', models.BooleanField(default=True, verbose_name='Успешно')),
                ('error_message', models.TextField(blank=True, null=True, verbose_name='Сообщение об ошибке')),
                ('related_announcement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='main.announcement', verbose_name='Связанное объявление')),
                ('related_collection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='main.collection', verbose_name='Связанная коллекция')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Активность пользователя',
                'verbose_name_plural': 'Активность пользователей',
                'db_table': 'user_activities',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='user_activi_user_id_d06d90_idx'), models.Index(fields=['action_type'], name='user_activi_action__ed5d9e_idx'), models.Index(fields=['timestamp'], name='user_activi_timesta_12eff7_idx')],
            },
        ),
    ]
