# Generated by Django 5.2.3 on 2025-07-13 23:45

from django.db import migrations


def populate_reference_data(apps, schema_editor):
    """Populate reference data for dropdowns"""
    
    # Get model classes
    Microdistrict = apps.get_model('main', 'Microdistrict')
    RepairType = apps.get_model('main', 'RepairType')
    BuildingType = apps.get_model('main', 'BuildingType')
    ResidentialComplex = apps.get_model('main', 'ResidentialComplex')
    
    # Create microdistricts
    microdistricts_data = [
        {'code': 'almaty', 'name': 'Алматы'},
        {'code': 'baikonyr', 'name': 'Байконыр'},
        {'code': 'esil', 'name': 'Есиль'},
        {'code': 'saryarka', 'name': 'Сарыарка'},
        {'code': 'nura', 'name': 'Нура'},
    ]
    
    for data in microdistricts_data:
        microdistrict, created = Microdistrict.objects.get_or_create(
            code=data['code'],
            defaults={'name': data['name'], 'is_active': True}
        )
    
    # Create repair types
    repair_types_data = [
        {'code': 'raw', 'name': 'Черновая отделка'},
        {'code': 'new', 'name': 'Новый ремонт'},
        {'code': 'neat', 'name': 'Аккуратный ремонт'},
        {'code': 'old', 'name': 'Старый ремонт'},
    ]
    
    for data in repair_types_data:
        repair_type, created = RepairType.objects.get_or_create(
            code=data['code'],
            defaults={'name': data['name'], 'is_active': True}
        )
    
    # Create building types
    building_types_data = [
        {'code': 'brick', 'name': 'кирпичный'},
        {'code': 'panel', 'name': 'панельный'},
        {'code': 'monolith', 'name': 'монолитный'},
        {'code': 'other', 'name': 'иной'},
    ]
    
    for data in building_types_data:
        building_type, created = BuildingType.objects.get_or_create(
            code=data['code'],
            defaults={'name': data['name'], 'is_active': True}
        )
    
    # Create some sample residential complexes
    residential_complexes_data = [
        {'microdistrict_code': 'esil', 'name': 'Изумрудный квартал'},
        {'microdistrict_code': 'esil', 'name': 'Голубой залив'},
        {'microdistrict_code': 'saryarka', 'name': 'Новый город'},
        {'microdistrict_code': 'saryarka', 'name': 'Жайлау'},
        {'microdistrict_code': 'almaty', 'name': 'Алматы сити'},
        {'microdistrict_code': 'baikonyr', 'name': 'Космос'},
        {'microdistrict_code': 'nura', 'name': 'Нура парк'},
    ]
    
    for data in residential_complexes_data:
        try:
            microdistrict = Microdistrict.objects.get(code=data['microdistrict_code'])
            complex_obj, created = ResidentialComplex.objects.get_or_create(
                name=data['name'],
                microdistrict=microdistrict,
                defaults={'is_active': True}
            )
        except Microdistrict.DoesNotExist:
            continue


def reverse_populate_reference_data(apps, schema_editor):
    """Remove reference data"""
    
    # Get model classes
    Microdistrict = apps.get_model('main', 'Microdistrict')
    RepairType = apps.get_model('main', 'RepairType')
    BuildingType = apps.get_model('main', 'BuildingType')
    ResidentialComplex = apps.get_model('main', 'ResidentialComplex')
    
    # Delete all data
    ResidentialComplex.objects.all().delete()
    BuildingType.objects.all().delete()
    RepairType.objects.all().delete()
    Microdistrict.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0014_add_user_activity'),
    ]

    operations = [
        migrations.RunPython(populate_reference_data, reverse_populate_reference_data),
    ]
