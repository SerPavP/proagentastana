from django.core.cache import cache
from django.core.management.base import BaseCommand
import time

class Command(BaseCommand):
    help = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã, —Ç–∏–ø—ã –¥–æ–º–æ–≤ –∏ —Ç.–¥.)'

    def add_arguments(self, parser):
        parser.add_argument(
            '--clear',
            action='store_true',
            help='–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
        )
        parser.add_argument(
            '--warmup',
            action='store_true',
            help='–ü—Ä–æ–≥—Ä–µ—Ç—å –∫—ç—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
        )
        parser.add_argument(
            '--stats',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞'
        )
        parser.add_argument(
            '--test',
            action='store_true',
            help='–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è'
        )

    def handle(self, *args, **options):
        if options['clear']:
            self.clear_static_cache()
        elif options['warmup']:
            self.warmup_static_cache()
        elif options['stats']:
            self.show_cache_stats()
        elif options['test']:
            self.test_cache_performance()
        else:
            self.stdout.write(
                self.style.WARNING('–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: --clear, --warmup, --stats –∏–ª–∏ --test')
            )

    def clear_static_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        # –ö–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è —Ñ–æ—Ä–º –ø–æ–∏—Å–∫–∞
        search_keys = [
            'search_form_microdistrict_choices_v2',
            'search_form_building_type_choices_v2',
            'search_form_complex_choices_v2',
        ]
        
        # –ö–ª—é—á–∏ –∫—ç—à–∞ –¥–ª—è —Ñ–æ—Ä–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        announcement_keys = [
            'announcement_form_microdistrict_qs_v2',
            'announcement_form_complex_qs_v2',
            'announcement_form_repair_qs_v2',
            'announcement_form_building_type_qs_v2',
        ]
        
        all_keys = search_keys + announcement_keys
        
        for key in all_keys:
            cache.delete(key)
            self.stdout.write(f'   ‚ùå –£–¥–∞–ª–µ–Ω: {key}')
        
        self.stdout.write(
            self.style.SUCCESS(f'‚úÖ –û—á–∏—â–µ–Ω–æ {len(all_keys)} –∫–ª—é—á–µ–π –∫—ç—à–∞')
        )

    def warmup_static_cache(self):
        """–ü—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç –∫—ç—à —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.stdout.write('üî• –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
        
        start_time = time.time()
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞
            from main.forms import SearchForm, AnnouncementForm
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—ã - —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç –∫—ç—à
            search_form = SearchForm()
            self.stdout.write('   ‚úÖ SearchForm –∫—ç—à –ø—Ä–æ–≥—Ä–µ—Ç')
            
            announcement_form = AnnouncementForm()
            self.stdout.write('   ‚úÖ AnnouncementForm –∫—ç—à –ø—Ä–æ–≥—Ä–µ—Ç')
            
            elapsed = time.time() - start_time
            self.stdout.write(
                self.style.SUCCESS(f'üöÄ –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥')
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞: {e}')
            )

    def show_cache_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ —Å —É—á–µ—Ç–æ–º LocMemCache"""
        self.stdout.write('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:')
        self.stdout.write('')
        
        # –û–±—ä—è—Å–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ LocMemCache
        from django.conf import settings
        cache_backend = settings.CACHES['default']['BACKEND']
        
        if 'locmem' in cache_backend.lower():
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LocMemCache (–ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞)'))
            self.stdout.write('   –ö—ç—à –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É Python')
            self.stdout.write('   –ö–æ–º–∞–Ω–¥–∞ stats –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –ù–û–í–û–ú –ø—Ä–æ—Ü–µ—Å—Å–µ')
            self.stdout.write('   –ü–æ—ç—Ç–æ–º—É –∫—ç—à –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—É—Å—Ç–æ–π')
            self.stdout.write('')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à –≤ —ç—Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ
        self.stdout.write('üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ...')
        
        try:
            from main.forms import SearchForm, AnnouncementForm
            
            # –û—á–∏—â–∞–µ–º –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
            cache.clear()
            self.stdout.write('   üßπ –ö—ç—à –æ—á–∏—â–µ–Ω')
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—ã
            search_form = SearchForm()
            announcement_form = AnnouncementForm()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—ç—à –∑–∞–ø–æ–ª–Ω–∏–ª—Å—è
            cache_keys = [
                ('SearchForm –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã', 'search_form_microdistrict_choices_v2'),
                ('SearchForm —Ç–∏–ø—ã –¥–æ–º–æ–≤', 'search_form_building_type_choices_v2'),
                ('SearchForm –ñ–ö', 'search_form_complex_choices_v2'),
                ('AnnouncementForm –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã', 'announcement_form_microdistrict_qs_v2'),
                ('AnnouncementForm –ñ–ö', 'announcement_form_complex_qs_v2'),
                ('AnnouncementForm —Ä–µ–º–æ–Ω—Ç', 'announcement_form_repair_qs_v2'),
                ('AnnouncementForm —Ç–∏–ø—ã –¥–æ–º–æ–≤', 'announcement_form_building_type_qs_v2'),
            ]
            
            cached_count = 0
            total_count = len(cache_keys)
            
            for name, key in cache_keys:
                value = cache.get(key)
                if value is not None:
                    if isinstance(value, list) and len(value) > 0:
                        first_item = value[0]
                        if isinstance(first_item, tuple):
                            # Choices –¥–ª—è —Ñ–æ—Ä–º –ø–æ–∏—Å–∫–∞
                            self.stdout.write(f'   ‚úÖ {name}: {len(value)-1} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (+ –ø—É—Å—Ç–æ–π)')
                        else:
                            # –û–±—ä–µ–∫—Ç—ã Django –¥–ª—è —Ñ–æ—Ä–º –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                            self.stdout.write(f'   ‚úÖ {name}: {len(value)} –æ–±—ä–µ–∫—Ç–æ–≤')
                    else:
                        self.stdout.write(f'   ‚úÖ {name}: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ')
                    cached_count += 1
                else:
                    self.stdout.write(f'   ‚ùå {name}: –Ω–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ')
            
            self.stdout.write('')
            if cached_count == total_count:
                self.stdout.write(self.style.SUCCESS(f'üéâ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ({cached_count}/{total_count})'))
            else:
                self.stdout.write(self.style.ERROR(f'‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º ({cached_count}/{total_count})'))
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {e}'))

    def test_cache_performance(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stdout.write('‚ö° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø')
        self.stdout.write('=' * 55)
        
        try:
            from main.forms import SearchForm, AnnouncementForm
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            cache.clear()
            
            # –¢–µ—Å—Ç –±–µ–∑ –∫—ç—à–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
            self.stdout.write('üêå –ë–ï–ó –ö–≠–®–ê (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫):')
            start = time.time()
            form1 = SearchForm()
            time1 = time.time() - start
            self.stdout.write(f'   SearchForm: {time1:.3f} —Å–µ–∫')

            start = time.time()
            form2 = AnnouncementForm()
            time2 = time.time() - start
            self.stdout.write(f'   AnnouncementForm: {time2:.3f} —Å–µ–∫')

            total_without_cache = time1 + time2
            self.stdout.write(f'   üìä –ò–¢–û–ì–û: {total_without_cache:.3f} —Å–µ–∫')
            self.stdout.write('')

            # –¢–µ—Å—Ç —Å –∫—ç—à–µ–º (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏)
            self.stdout.write('üöÄ –° –ö–≠–®–ï–ú (–ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏):')
            start = time.time()
            form3 = SearchForm()
            time3 = time.time() - start
            self.stdout.write(f'   SearchForm: {time3:.3f} —Å–µ–∫')

            start = time.time()
            form4 = AnnouncementForm()
            time4 = time.time() - start
            self.stdout.write(f'   AnnouncementForm: {time4:.3f} —Å–µ–∫')

            total_with_cache = time3 + time4
            self.stdout.write(f'   üìä –ò–¢–û–ì–û: {total_with_cache:.3f} —Å–µ–∫')
            self.stdout.write('')

            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if total_without_cache > 0 and total_with_cache > 0:
                speedup = total_without_cache / total_with_cache
                improvement = ((total_without_cache - total_with_cache) / total_without_cache) * 100
                
                self.stdout.write('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:')
                self.stdout.write(f'   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x')
                self.stdout.write(f'   –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.1f}%')
                
                if speedup > 10:
                    self.stdout.write(self.style.SUCCESS('   ‚úÖ –ù–ï–í–ï–†–û–Ø–¢–ù–û–ï —É—Å–∫–æ—Ä–µ–Ω–∏–µ!'))
                elif speedup > 2:
                    self.stdout.write(self.style.SUCCESS('   ‚úÖ –û–¢–õ–ò–ß–ù–û–ï —É—Å–∫–æ—Ä–µ–Ω–∏–µ!'))
                elif speedup > 1.5:
                    self.stdout.write(self.style.SUCCESS('   ‚úÖ –•–æ—Ä–æ—à–µ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ!'))
                else:
                    self.stdout.write(self.style.WARNING('   ‚ö†Ô∏è –ù–µ–±–æ–ª—å—à–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ'))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}'))
