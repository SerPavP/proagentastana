"""
Django settings for proagentastana project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-9nkjvxva0rm#$s@n0j7+vuj+s)k%3=)n-vb!8j1kvzzjl08_y&')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'main.middleware.DatabaseErrorMiddleware',  # Обработка ошибок курсора базы данных
    'main.middleware.LoginRequiredMiddleware',  # Требование авторизации для всех страниц
    'main.middleware.UserActivityMiddleware',  # Отслеживание активности пользователей
    'main.middleware.UserSessionMiddleware',  # Отслеживание сессий пользователей
]

ROOT_URLCONF = 'proagentastana.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'proagentastana.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - supports Neon DATABASE_URL and fallback options
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    # Use DATABASE_URL (recommended for Neon)
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
    
    # Add Neon-specific configurations for stability
    DATABASES['default']['CONN_MAX_AGE'] = 60  # Enable connection reuse for performance
    DATABASES['default']['CONN_HEALTH_CHECKS'] = True  # Enable connection health checks
    DATABASES['default']['OPTIONS'] = {
        'sslmode': 'require',
        'connect_timeout': 10,
        'application_name': 'proagentastana',
        'keepalives_idle': 600,
        'keepalives_interval': 30,
        'keepalives_count': 3,
        # Дополнительные настройки для стабильности
        'server_side_binding': True,
    }
else:
    # Fallback to individual parameters or SQLite
    db_name = config('DB_NAME', default='proagentastana_db')
    
    if db_name.endswith('.sqlite3'):
        # SQLite configuration
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / db_name,
            }
        }
    else:
        # PostgreSQL configuration with individual parameters
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': config('DB_NAME', default='proagentastana_db'),
                'USER': config('DB_USER', default='proagentastana_user'),
                'PASSWORD': config('DB_PASSWORD', default='P9dsdM'),
                'HOST': config('DB_HOST', default='127.0.0.1'),
                'PORT': config('DB_PORT', default='5433'),
                'OPTIONS': {
                    'sslmode': config('DB_SSLMODE', default='require'),
                },
            }
        }


# Кэширование для производительности
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 минут
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Время жизни сессий (для стабильности используем базу данных)
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Используем БД вместо кэша
SESSION_COOKIE_AGE = 432000  # 5 дней (5 * 24 * 60 * 60 = 432000 секунд)
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Сессия не истекает при закрытии браузера

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom authentication backends
AUTHENTICATION_BACKENDS = [
    'main.auth_backends.PhoneAuthBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Custom user model
AUTH_USER_MODEL = 'main.User'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Image optimization settings
IMAGE_OPTIMIZATION = {
    'ANNOUNCEMENT_PHOTOS': {
        'MAX_WIDTH': 1600,  # Уменьшено с 1920
        'MAX_HEIGHT': 900,  # Уменьшено с 1080
        'QUALITY': 80,      # Уменьшено с 85 для лучшего сжатия
        'THUMBNAIL_SIZE': (400, 300),
    },
    'USER_PHOTOS': {
        'MAX_WIDTH': 600,   # Уменьшено с 800
        'MAX_HEIGHT': 600,  # Уменьшено с 800
        'QUALITY': 85,      # Уменьшено с 90
    },
    'MAX_FILE_SIZE': 15 * 1024 * 1024,  # Увеличено до 15MB для больших исходных файлов
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session settings
SESSION_COOKIE_AGE = 432000  # 5 days (5 * 24 * 60 * 60 = 432000 seconds)
SESSION_SAVE_EVERY_REQUEST = True
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Сессия не истекает при закрытии браузера
SESSION_COOKIE_SECURE = False  # Для разработки, в продакшене должно быть True

# Login URLs
LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

# Security settings for production
if not DEBUG:
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
    SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=31536000, cast=int)
    SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True, cast=bool)
    SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=True, cast=bool)
    SECURE_CONTENT_TYPE_NOSNIFF = config('SECURE_CONTENT_TYPE_NOSNIFF', default=True, cast=bool)
    SECURE_BROWSER_XSS_FILTER = config('SECURE_BROWSER_XSS_FILTER', default=True, cast=bool)
    X_FRAME_OPTIONS = config('X_FRAME_OPTIONS', default='DENY')
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# CSRF settings
CSRF_TRUSTED_ORIGINS = config('CSRF_TRUSTED_ORIGINS', default='').split(',') if config('CSRF_TRUSTED_ORIGINS', default='') else []

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 15 * 1024 * 1024  # 15MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 15 * 1024 * 1024  # 15MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

