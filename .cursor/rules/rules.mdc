---
description:
globs:
alwaysApply: false
---
# ProAgentAstana - Правила разработки

## Общая информация о проекте
- **Название**: ProAgentAstana - платформа недвижимости для Астаны
- **Технологии**: Django 5.2.3, PostgreSQL, Bootstrap 5
- **Архитектура**: Монолитное Django-приложение с разделением на backend и frontend

## Backend (Django) - Структура и правила

### Основные директории backend:
- `proagentastana/` - настройки проекта Django
- `main/` - основное приложение
- `manage.py` - управление Django
- `requirements.txt` - зависимости Python

### Правила для backend разработки:

#### 1. Модели данных (`main/models.py`)
- Используйте описательные имена полей
- Добавляйте `verbose_name` для всех полей
- Используйте `help_text` для сложных полей
- Соблюдайте связи между моделями (ForeignKey, ManyToMany)
- Всегда добавляйте `__str__` методы для моделей

#### 2. Представления (`main/views.py`)
- Разделяйте логику на сервисы (`main/services.py`)
- Используйте Django Class-Based Views где возможно
- Добавляйте декораторы для аутентификации и разрешений
- Обрабатывайте исключения и возвращайте понятные сообщения об ошибках
- Используйте `@login_required` для защищенных страниц

#### 3. Формы (`main/forms.py`)
- Создавайте отдельные формы для разных операций
- Используйте валидацию на уровне форм
- Добавляйте кастомные валидаторы где необходимо
- Используйте `clean()` методы для комплексной валидации

#### 4. Сервисы (`main/services.py`)
- Выносите бизнес-логику в сервисы
- Делайте сервисы переиспользуемыми
- Добавляйте типизацию параметров и возвращаемых значений
- Обрабатывайте исключения в сервисах

#### 5. URL-маршрутизация
- Используйте описательные имена URL-паттернов
- Группируйте связанные URL в отдельные файлы
- Используйте `path()` вместо `url()` (Django 2.0+)

#### 6. Аутентификация
- Используйте кастомную аутентификацию по телефону
- Соблюдайте безопасность паролей
- Используйте сессии для отслеживания пользователей

## Frontend (HTML/CSS/JavaScript) - Структура и правила

### Основные директории frontend:
- `templates/` - HTML шаблоны Django
- `static/css/` - CSS файлы
- `static/img/` - изображения
- `static/js/` - JavaScript файлы (если есть)

### Правила для frontend разработки:

#### 1. HTML шаблоны (`templates/`)
- Используйте `base.html` как базовый шаблон
- Наследуйтесь от базового шаблона: `{% extends 'base.html' %}`
- Используйте блоки Django: `{% block content %}`
- Добавляйте мета-теги для SEO
- Используйте семантические HTML5 теги

#### 2. CSS стили (`static/css/`)
- Используйте Bootstrap 5 как основу
- Создавайте кастомные CSS классы для специфичных стилей
- Соблюдайте принципы responsive design
- Используйте CSS переменные для цветов и размеров
- Минимизируйте использование inline стилей

#### 3. JavaScript (если используется)
- Размещайте в `static/js/`
- Используйте современный JavaScript (ES6+)
- Обрабатывайте события пользователя
- Используйте AJAX для динамических обновлений

## Общие правила разработки

### 1. Именование
- Используйте snake_case для Python файлов и переменных
- Используйте PascalCase для классов
- Используйте kebab-case для CSS классов
- Используйте описательные имена

### 2. Комментарии и документация
- Добавляйте docstrings для функций и классов
- Комментируйте сложную логику
- Обновляйте README.md при изменении функциональности

### 3. Безопасность
- Валидируйте все пользовательские данные
- Используйте CSRF токены
- Защищайте от SQL инъекций (используйте ORM)
- Храните секретные данные в переменных окружения

### 4. Производительность
- Оптимизируйте запросы к базе данных
- Используйте кэширование где возможно
- Минимизируйте размер статических файлов
- Используйте lazy loading для изображений

### 5. Тестирование
- Пишите тесты для критической функциональности
- Тестируйте модели, представления и формы
- Используйте фикстуры для тестовых данных

## Структура базы данных

### Основные модели:
- **User**: Пользователи с аутентификацией по телефону
- **Agency**: Агентства недвижимости
- **Address**: Адреса объектов
- **Announcement**: Объявления о недвижимости
- **Photo**: Фотографии объектов и пользователей
- **Collection**: Коллекции объектов пользователей
- **UserSession**: Отслеживание сессий
- **PageView**: Аналитика просмотров

## Команды для разработки

### Запуск проекта:
```bash
python manage.py runserver
```

### Миграции:
```bash
python manage.py makemigrations
python manage.py migrate
```

### Создание суперпользователя:
```bash
python manage.py createsuperuser
```

### Сбор статических файлов:
```bash
python manage.py collectstatic
```

## Рекомендации по развертыванию

### Для production:
- Используйте PostgreSQL
- Настройте HTTPS
- Используйте CDN для статических файлов
- Настройте логирование
- Используйте переменные окружения для настроек

### Переменные окружения:
- `DEBUG=False`
- `SECRET_KEY`
- `DATABASE_URL`
- `ALLOWED_HOSTS`

## Приоритеты разработки

### Высокий приоритет:
1. Исправление критических багов
2. Улучшение безопасности
3. Оптимизация производительности

### Средний приоритет:
1. Добавление новой функциональности
2. Улучшение UI/UX
3. Рефакторинг кода

### Низкий приоритет:
1. Добавление дополнительных функций
2. Улучшение документации
3. Оптимизация для edge cases
