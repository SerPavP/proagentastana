---
description: 
globs: 
alwaysApply: false
---
# Main Rules - ProAgentAstana

## Общие принципы и архитектура проекта

### Проект: ProAgentAstana
**Описание**: Платформа недвижимости для Астаны, Казахстан
**Технологии**: Django 5.2.3, PostgreSQL, Bootstrap 5
**Архитектура**: Монолитное Django-приложение

### Основные принципы разработки

#### 1. Чистая архитектура
- Разделение ответственности между слоями
- Независимость бизнес-логики от фреймворка
- Тестируемость всех компонентов
- Простота поддержки и расширения

#### 2. DRY (Don't Repeat Yourself)
- Избегайте дублирования кода
- Создавайте переиспользуемые компоненты
- Используйте наследование и композицию
- Выносите общую логику в утилиты

#### 3. SOLID принципы
- **S** - Single Responsibility Principle
- **O** - Open/Closed Principle
- **L** - Liskov Substitution Principle
- **I** - Interface Segregation Principle
- **D** - Dependency Inversion Principle

### Структура проекта

```
proagentastana/
├── proagentastana/          # Настройки проекта Django
│   ├── settings.py         # Основные настройки
│   ├── urls.py            # Главная маршрутизация
│   ├── wsgi.py           # WSGI конфигурация
│   └── asgi.py           # ASGI конфигурация
├── main/                   # Основное приложение
│   ├── models.py          # Модели данных
│   ├── views.py           # Представления
│   ├── forms.py           # Формы
│   ├── services.py        # Бизнес-логика
│   ├── admin.py           # Админ-панель
│   ├── urls.py            # URL маршруты
│   └── migrations/        # Миграции БД
├── templates/              # HTML шаблоны
│   ├── base.html          # Базовый шаблон
│   └── main/              # Шаблоны приложения
├── static/                 # Статические файлы
│   ├── css/               # Стили
│   ├── js/                # JavaScript
│   └── img/               # Изображения
├── media/                  # Загруженные файлы
├── manage.py              # Управление Django
├── requirements.txt       # Зависимости Python
└── README.md             # Документация
```

### Модели данных

#### Основные сущности:
1. **User** - Пользователи системы
2. **Agency** - Агентства недвижимости
3. **Address** - Адреса объектов
4. **Announcement** - Объявления о недвижимости
5. **Photo** - Фотографии объектов
6. **Collection** - Коллекции пользователей
7. **UserSession** - Сессии пользователей
8. **PageView** - Аналитика просмотров

### Безопасность

#### Аутентификация
- Кастомная аутентификация по телефону
- Безопасное хранение паролей (bcrypt)
- Сессии с настройкой времени жизни
- Защита от брутфорс атак

#### Авторизация
- Роли пользователей (агент, клиент, админ)
- Разрешения на уровне объектов
- Проверка прав доступа в представлениях

#### Защита данных
- CSRF защита для всех форм
- Валидация входных данных
- Защита от SQL инъекций
- Безопасная загрузка файлов

### Производительность

#### Оптимизация базы данных
- Индексы для часто используемых полей
- Оптимизация запросов (select_related, prefetch_related)
- Пагинация для больших списков
- Кэширование результатов запросов

#### Оптимизация фронтенда
- Минификация CSS и JavaScript
- Сжатие изображений
- Lazy loading для изображений
- CDN для статических файлов

#### Мониторинг
- Логирование ошибок и важных событий
- Метрики производительности
- Отслеживание пользовательских сессий
- Аналитика использования

### Тестирование

#### Типы тестов
1. **Unit тесты** - тестирование отдельных функций
2. **Integration тесты** - тестирование взаимодействия компонентов
3. **Functional тесты** - тестирование пользовательских сценариев
4. **Performance тесты** - тестирование производительности

#### Покрытие тестами
- Минимум 80% покрытия кода
- Тестирование критических путей
- Тестирование граничных случаев
- Автоматизированное тестирование в CI/CD

### Развертывание

#### Окружения
- **Development** - локальная разработка
- **Staging** - тестовое окружение
- **Production** - продакшн окружение

#### Переменные окружения
```bash
DEBUG=False
SECRET_KEY=your-secret-key
DATABASE_URL=postgresql://user:pass@host:port/db
ALLOWED_HOSTS=your-domain.com
STATIC_URL=https://cdn.your-domain.com/static/
MEDIA_URL=https://cdn.your-domain.com/media/
```

### Документация

#### Код документация
- Docstrings для всех функций и классов
- Комментарии для сложной логики
- README файлы для каждого модуля
- Примеры использования

#### Пользовательская документация
- Руководство пользователя
- API документация
- Руководство по развертыванию
- Troubleshooting guide

### Стандарты кодирования

#### Python/Django
- PEP 8 стиль кода
- Type hints для функций
- Именование: snake_case для переменных, PascalCase для классов
- Максимальная длина строки: 88 символов

#### HTML/CSS/JavaScript
- Семантическая разметка HTML5
- BEM методология для CSS
- ES6+ стандарты JavaScript
- Accessibility (WCAG 2.1)

### Git workflow

#### Ветки
- `main` - основная ветка (production)
- `develop` - ветка разработки
- `feature/feature-name` - ветки для новых функций
- `hotfix/bug-fix` - ветки для исправления багов

#### Коммиты
- Используйте conventional commits
- Пишите понятные сообщения коммитов
- Делайте атомарные коммиты
- Используйте префиксы: feat, fix, docs, style, refactor, test, chore

### CI/CD

#### Автоматизация
- Автоматические тесты при каждом коммите
- Проверка качества кода (linting)
- Автоматическое развертывание на staging
- Уведомления о статусе сборки

#### Мониторинг
- Мониторинг доступности сервиса
- Алерты при ошибках
- Метрики производительности
- Логирование всех событий

### Масштабирование

#### Горизонтальное масштабирование
- Балансировка нагрузки
- Репликация базы данных
- Кэширование на уровне приложения
- CDN для статических файлов

#### Вертикальное масштабирование
- Оптимизация запросов к БД
- Кэширование результатов
- Асинхронная обработка задач
- Оптимизация кода

### Резервное копирование

#### База данных
- Ежедневные полные бэкапы
- Почасовые инкрементальные бэкапы
- Тестирование восстановления
- Хранение бэкапов в разных локациях

#### Файлы
- Резервное копирование медиа файлов
- Версионирование статических файлов
- Репликация на разные серверы
- Мониторинг целостности данных

### Приоритеты разработки

#### Высокий приоритет
1. Исправление критических багов
2. Улучшение безопасности
3. Оптимизация производительности
4. Критические функции для пользователей

#### Средний приоритет
1. Новые функции
2. Улучшение UI/UX
3. Рефакторинг кода
4. Оптимизация базы данных

#### Низкий приоритет
1. Дополнительные функции
2. Улучшение документации
3. Оптимизация для edge cases
4. Экспериментальные функции

### Метрики качества

#### Код качество
- Покрытие тестами > 80%
- Отсутствие критических уязвимостей
- Соответствие стандартам кодирования
- Документированность кода

#### Производительность
- Время загрузки страницы < 3 секунд
- Время ответа API < 500ms
- Доступность сервиса > 99.9%
- Оптимизация размера страниц

#### Пользовательский опыт
- Удобство использования
- Скорость выполнения операций
- Доступность для людей с ограниченными возможностями
- Адаптивность под разные устройства

